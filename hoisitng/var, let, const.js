/* 
메모리 관점으로 보기.
*/


// let이랑 const는 변수병만 등록한다.


/* 
1. 자바스크립트 코드 실행 과정
자바스크립트 코드 실행 -> JS 엔진이 선언된 변수들을 전부 읽어 들여 메모리에 저장 -> 선언된 변수 a를 호출 -> 메모리에 저장된 변수 a 불러들임.
* 자바스크립트 엔진(V8) - 자바스크립트 코드를 실행하는 프로그램.

자바스크립트 엔진은 코드를 두 번 읽는다
호이스팅 단계
변수의 선언된 내용들만 먼저 읽어들인다.
저장된 내용을 기반으로 다시 읽어들이면서 실행


2. hoisting
선언된 변수들을 선언된 범위의 최상단으로 끌어올리는 것.
프로그램 실행시 메모리에 변수들을 먼저 읽어들여 저장하는 것(변수에는 undefined가 저장되어있다 - 변수에 아무것도 할당되어있지 않으면 undefined가 할당된다).
* hoist - 1. 승강 장치. 2. (밧줄이나 장비를 이용하여) 들어 올리다, 끌어올리다.


3-1. var
- ES6 이전 문법()
- var는 선언하기 전에 할당하여 사용할 수 있다(hoisting).
- 한번 선언된 변수를 다시 선언할 수 있다. 
- ES6 문법인 let과 const가 등장한 이후 권장되지 않는 문법이다.
- var를 사용하면 직관적인 가독성에 있어 혼란을 일으킬수 있으므로 var를 
3-2. var hoisting
- 선언된 변수들을 선언된 범위의 최상단으로 끌어올리는 것.
- 변수 선언은 호이스팅 되지만 할당은 호이스팅 되지 않는다(호이스팅시 변수에 undefined를 할당하기 떄문).
- 함수만 제외하고 전부 호이스팅 된다.

- 함수에서만 스코프가 적용된다(일반적인 프로그래밍 스코프 방식이 아니다).

- lexical - 클로져랑 관련 있음.
*/


// 선언은 hoisting되지만 할당은 hoisting 되지 않는다.
console.log(a); // undefined
var a = 1;
console.log(a); // 1

// 함수 - 함수에서만 스코프가 적용된다.
var a = 10;

function number() {
    var a = 100;
}

console.log(a); // 10



/* 
let 
- ES6 이후 문법
- 한번 선언된 변수를 다시 선얼할 수 없다.
- let도 hoisting이 되지만 선언된 변수에 값이 할당되는 구문이 나오기 전까지는 사용할 수 없다.
*/



/* 
const
*/